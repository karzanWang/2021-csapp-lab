#19302010011 王海伟


#循环展开六层，并且
#当src的数据量少于6 离开循环直接判断剩下的数据并返回
#提前mrmovq数据 减少hazard

#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Written by fanese-myk, use iaddq, rearrange instruction to avoid load/use hazzard
# use loop unrolling 5*1
# make few changes from ver0.6 to make program run faster(avoid unpredicted branch)
# Line 51 is fundamental
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = l len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	
	
	iaddq  $-6, %rdx        # len -= 6 less then 6 jmp to Finish
	jl     Finish            

Loop:	
    mrmovq (%rdi), %r10	    
	mrmovq 8(%rdi), %r11    
	rmmovq %r10, (%rsi)	    # src[i] to dst
	andq   %r10, %r10	    # src[i] <= 0?
	jle    Stage0		    
	iaddq  $1, %rax		    # count++

Stage0:	
	rmmovq %r11, 8(%rsi)    # src[i+1] to dst
	andq   %r11, %r11       
	jle    Stage1		    
	iaddq  $1, %rax         

Stage1: 
	mrmovq 16(%rdi), %r10   # src[i+2] to %r10
	mrmovq 24(%rdi), %r11   # src[i+3] to %r11
	rmmovq %r10, 16(%rsi)   # src[i+2] to dst[i+2]
	andq   %r10, %r10       
	jle    Stage2           
	iaddq  $1, %rax         

Stage2: 
	rmmovq %r11, 24(%rsi)   # src[i+3] to dst
	andq   %r11, %r11      
	jle    Stage3            
	iaddq  $1, %rax         
	
Stage3: 
	mrmovq 32(%rdi), %r10   # src[i+4] to %r10
	mrmovq 40(%rdi), %r11   # src[i+5] to %r11
	rmmovq %r10, 32(%rsi)   # src[i+4] to dst[i+4]
	andq   %r10, %r10       
	jle    Stage4            
	iaddq  $1, %rax         

Stage4: 
	rmmovq %r11, 40(%rsi)   # src[i+5] to dst
	andq   %r11, %r11       
	jle    Unroller         
	iaddq  $1, %rax         


Unroller: 
	iaddq $48, %rdi         # start unrolling src at [i+6]
	iaddq $48, %rsi         # start unrolling dst at [i+6]
	iaddq $-6, %rdx         # len is now 6 less
	jge   Loop              # not done, unrolling

Finish:  
	iaddq $6, %rdx          # fix length

Finish0:
	iaddq  $-1, %rdx        # len--
	jl     Done             # finish up
	mrmovq (%rdi), %r10     
	mrmovq 8(%rdi), %r11    
	rmmovq %r10, (%rsi)     
	andq   %r10, %r10       
	jle    Finish1          
	iaddq  $1, %rax         
	
Finish1: 
	iaddq  $-1, %rdx        
	jl     Done             
	rmmovq %r11, 8(%rsi)    
	andq   %r11, %r11       
	jle    Finish2          
	iaddq  $1, %rax       

Finish2: 
	iaddq  $-1, %rdx        
	jl     Done             
	mrmovq 16(%rdi), %r10   
	mrmovq 24(%rdi), %r11   
	rmmovq %r10, 16(%rsi)   
	andq   %r10, %r10       
	jle    Finish3           
	iaddq  $1, %rax         

Finish3: 
	iaddq  $-1, %rdx        
	jl     Done	            
	rmmovq %r11, 24(%rsi)   
	andq   %r11, %r11       
	jle    Finish4          
	iaddq  $1, %rax 

Finish4: 
	iaddq  $-1, %rdx        
	jl     Done             
	mrmovq 32(%rdi), %r10   
	rmmovq %r10, 32(%rsi)   
	andq   %r10, %r10       
	jle    Done             
	iaddq  $1, %rax         


##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
